{"version":3,"sources":["modules/gui.ts","modules/store.ts","components/three/SwayingGrass.tsx","modules/utils.ts","modules/glsl.ts","components/three/TCanvas.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GUIController","_gui","_currentFolderName","_getGui","folderName","gui","_folder","title","folder","folders","find","f","_title","addFolder","_uncontainedName","name","controllers","c","_name","setFolder","addColor","obj","propertyName","rgbScale","displayName","controllerName","addNumericSlider","min","max","step","add","addDropdown","list","addButton","addCheckBox","this","GUI","_instance","undefined","datas","sway","ModelPath","process","useGLTF","preload","SwayingGrass","meshRef","useRef","instance","samplingGeometry","nodes","Rabbit","geometry","sampler","useMemo","samplingMesh","THREE","MeshSurfaceSampler","build","amount","updateMatrix","useCallback","object","samplingPosition","samplingNormal","i","sample","position","copy","lookAt","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","useEffect","applyMatrix4","makeRotationX","Math","PI","makeTranslation","shader","uniforms","u_time","value","u_sway","vertexShader","fragmentShader","useFrame","color","ref","args","side","TCanvas","camera","fov","aspect","window","innerWidth","innerHeight","near","far","dpr","devicePixelRatio","shadows","attach","OrbitControls","target","fallback","Stats","App","className","styles","container","css","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e1385a1.chunk.js","sourcesContent":["import GUI from 'lil-gui';\n\nexport class GUIController {\n\tprivate static _instance: GUIController | null\n\tprivate _gui\n\tprivate _currentFolderName: string | undefined\n\n\tprivate constructor() {\n\t\tthis._gui = new GUI()\n\t}\n\n\tstatic get instance() {\n\t\tif (!this._instance) {\n\t\t\tthis._instance = new GUIController()\n\t\t}\n\t\tthis._instance._currentFolderName = undefined\n\t\treturn this._instance\n\t}\n\n\tprivate _getGui = (folderName: string | undefined) => {\n\t\tlet gui = this._gui\n\t\tif (folderName) {\n\t\t\tgui = this._folder(folderName)\n\t\t} else if (this._currentFolderName) {\n\t\t\tgui = this._folder(this._currentFolderName)\n\t\t}\n\t\treturn gui\n\t}\n\n\tprivate _folder = (title: string) => {\n\t\tlet folder = this._gui.folders.find(f => f._title === title)\n\t\tif (!folder) folder = this._gui.addFolder(title)\n\t\treturn folder\n\t}\n\n\tprivate _uncontainedName = (gui: GUI, name: string) => {\n\t\treturn !gui.controllers.find(c => c._name === name)\n\t}\n\n\tsetFolder = (name: string) => {\n\t\tthis._currentFolderName = name\n\t\treturn this\n\t}\n\n\t/**\n\t * add color controls\n\t * @reference https://lil-gui.georgealways.com/#Guide#Colors\n\t */\n\taddColor = (\n\t\tobj: object,\n\t\tpropertyName: string,\n\t\trgbScale?: number | undefined,\n\t\tdisplayName?: string | undefined,\n\t\tfolderName?: string | undefined\n\t) => {\n\t\tconst controllerName = displayName ? displayName : propertyName\n\t\tconst gui = this._getGui(folderName)\n\n\t\tif (this._uncontainedName(gui, controllerName)) {\n\t\t\tgui.addColor(obj, propertyName, rgbScale).name(controllerName)\n\t\t}\n\t}\n\n\t/**\n\t * add numeric slider controls\n\t * @reference https://lil-gui.georgealways.com/#Guide#Numbers-and-Sliders\n\t */\n\taddNumericSlider = (\n\t\tobj: object,\n\t\tpropertyName: string,\n\t\tmin: number,\n\t\tmax: number,\n\t\tstep: number,\n\t\tdisplayName?: string | undefined,\n\t\tfolderName?: string | undefined\n\t) => {\n\t\tconst controllerName = displayName ? displayName : propertyName\n\t\tconst gui = this._getGui(folderName)\n\n\t\tif (this._uncontainedName(gui, controllerName)) {\n\t\t\tgui.add(obj, propertyName, min, max, step).name(controllerName)\n\t\t}\n\t}\n\n\t/**\n\t * add dropdown controls\n\t * @reference https://lil-gui.georgealways.com/#Guide#Dropdowns\n\t */\n\taddDropdown = (\n\t\tobj: object,\n\t\tpropertyName: string,\n\t\tlist: string[] | { [key: string]: number },\n\t\tdisplayName?: string | undefined,\n\t\tfolderName?: string | undefined\n\t) => {\n\t\tconst controllerName = displayName ? displayName : propertyName\n\t\tconst gui = this._getGui(folderName)\n\n\t\tif (this._uncontainedName(gui, controllerName)) {\n\t\t\tgui.add(obj, propertyName, list).name(controllerName)\n\t\t}\n\t}\n\n\t/**\n\t * add Button controls\n\t * @description property given by its property name is a callback method.\n\t * @reference https://lil-gui.georgealways.com/#Guide#Saving\n\t */\n\taddButton = (\n\t\tobj: object,\n\t\tpropertyName: string,\n\t\tdisplayName?: string | undefined,\n\t\tfolderName?: string | undefined\n\t) => {\n\t\tconst controllerName = displayName ? displayName : propertyName\n\t\tconst gui = this._getGui(folderName)\n\n\t\tif (this._uncontainedName(gui, controllerName)) {\n\t\t\tgui.add(obj, propertyName).name(controllerName)\n\t\t}\n\t}\n\n\t/**\n\t * add CheckBox controls\n\t * @description property given by its property name is type of boolean.\n\t * @reference https://lil-gui.georgealways.com/#Guide#Adding-Controllers\n\t */\n\taddCheckBox = (\n\t\tobj: object,\n\t\tpropertyName: string,\n\t\tdisplayName?: string | undefined,\n\t\tfolderName?: string | undefined\n\t) => {\n\t\tconst controllerName = displayName ? displayName : propertyName\n\t\tconst gui = this._getGui(folderName)\n\n\t\tif (this._uncontainedName(gui, controllerName)) {\n\t\t\tgui.add(obj, propertyName).name(controllerName)\n\t\t}\n\t}\n}\n","export const datas = {\n\tsway: 0.3\n}\n","import { useCallback, useEffect, useMemo, useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler';\r\nimport { useFBX, useGLTF } from '@react-three/drei';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { cnoise31 } from '../../modules/glsl';\r\nimport { GUIController } from '../../modules/gui';\r\nimport { datas } from '../../modules/store';\r\nimport { getPublicPath } from '../../modules/utils';\r\n\r\nconst ModelPath = getPublicPath('/assets/models/rabbit.glb')\r\nuseGLTF.preload(ModelPath)\r\n\r\ntype GLTFResult = GLTF & {\r\n\tnodes: {\r\n\t\tRabbit: THREE.Mesh\r\n\t}\r\n}\r\n\r\nexport const SwayingGrass: VFC = () => {\r\n\tconst meshRef = useRef<THREE.InstancedMesh>(null)\r\n\r\n\t// --------------------------------------------\r\n\t// add controller\r\n\r\n\tconst gui = GUIController.instance.setFolder('Uniforms')\r\n\tgui.addNumericSlider(datas, 'sway', 0.1, 1.0, 0.01)\r\n\r\n\t// --------------------------------------------\r\n\t// sampling geometry\r\n\r\n\t// const samplingGeometry = useMemo(() => new THREE.PlaneGeometry(20, 20), [])\r\n\t// const samplingGeometry = useMemo(() => new THREE.IcosahedronGeometry(10, 10), [])\r\n\t// const samplingGeometry = useMemo(() => new THREE.TorusKnotGeometry(8, 1.5, 200, 20, 3, 5), [])\r\n\tconst { nodes } = useGLTF(ModelPath) as GLTFResult\r\n\tconst samplingGeometry = nodes.Rabbit.geometry\r\n\r\n\t// --------------------------------------------\r\n\t// create sampler\r\n\r\n\tconst sampler = useMemo(() => {\r\n\t\tconst samplingMesh = new THREE.Mesh(samplingGeometry, new THREE.MeshBasicMaterial())\r\n\t\tconst sampler = new MeshSurfaceSampler(samplingMesh).build()\r\n\t\treturn sampler\r\n\t}, [samplingGeometry])\r\n\r\n\t// --------------------------------------------\r\n\t// initialize matrix\r\n\r\n\tconst amount = 200000 // 200k\r\n\r\n\tconst updateMatrix = useCallback(() => {\r\n\t\tconst object = new THREE.Object3D()\r\n\t\tconst samplingPosition = new THREE.Vector3()\r\n\t\tconst samplingNormal = new THREE.Vector3()\r\n\r\n\t\tfor (let i = 0; i < amount; i++) {\r\n\t\t\tsampler.sample(samplingPosition, samplingNormal)\r\n\t\t\tobject.position.copy(samplingPosition)\r\n\t\t\tobject.lookAt(samplingNormal.add(samplingPosition))\r\n\t\t\tobject.updateMatrix()\r\n\r\n\t\t\tmeshRef.current!.setMatrixAt(i, object.matrix)\r\n\t\t}\r\n\t\tmeshRef.current!.instanceMatrix.needsUpdate = true\r\n\t}, [amount, sampler])\r\n\r\n\tuseEffect(() => {\r\n\t\t// fixed cone matrix\r\n\t\tmeshRef.current!.geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(Math.PI / 2))\r\n\t\tmeshRef.current!.geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0, 0.5))\r\n\r\n\t\tupdateMatrix()\r\n\t}, [updateMatrix])\r\n\r\n\t// --------------------------------------------\r\n\t// create shader\r\n\r\n\tconst shader: THREE.Shader = {\r\n\t\tuniforms: {\r\n\t\t\tu_time: { value: 0 },\r\n\t\t\tu_sway: { value: datas.sway }\r\n\t\t},\r\n\t\tvertexShader: vertexShader,\r\n\t\tfragmentShader: fragmentShader\r\n\t}\r\n\r\n\tuseFrame(() => {\r\n\t\tshader.uniforms.u_time.value += 0.005\r\n\t\tshader.uniforms.u_sway.value = datas.sway\r\n\t})\r\n\r\n\treturn (\r\n\t\t<group>\r\n\t\t\t<mesh geometry={samplingGeometry}>\r\n\t\t\t\t<meshBasicMaterial color=\"#000\" />\r\n\t\t\t</mesh>\r\n\t\t\t<instancedMesh ref={meshRef} args={[undefined, undefined, amount]}>\r\n\t\t\t\t<coneGeometry args={[0.05, 1.0, 2, 20, false, 0, Math.PI]} />\r\n\t\t\t\t<shaderMaterial args={[shader]} side={THREE.DoubleSide} />\r\n\t\t\t</instancedMesh>\r\n\t\t</group>\r\n\t)\r\n}\r\n\r\n// ========================================================\r\n// shader\r\n\r\nconst vertexShader = `\r\nuniform float u_time;\r\nuniform float u_sway;\r\nvarying float v_pz;\r\n\r\n${cnoise31}\r\n\r\nconst float PI = 3.14159265358979;\r\n\r\nvoid main() {\r\n\tvec3 pos = position.xyz;\r\n\tv_pz = pos.z;\r\n\r\n\tvec3 base = vec3(pos.x, pos.y, 0.0);\r\n\tvec4 baseGP = instanceMatrix * vec4(base, 1.0);\r\n\tfloat noise = cnoise31(baseGP.xyz * vec3(0.1) + u_time * 0.5);\r\n\tnoise = smoothstep(-1.0, 1.0, noise);\r\n\r\n\tfloat swingX = sin(u_time * 2.0 + noise * 2.0 * PI) * pow(v_pz, 2.0);\r\n\tfloat swingY = cos(u_time * 2.0 + noise * 2.0 * PI) * pow(v_pz, 2.0);\r\n\tpos.x += swingX * u_sway;\r\n\tpos.y += swingY * u_sway;\r\n\r\n  vec4 globalPosition = instanceMatrix * vec4(pos, 1.0);\r\n\tvec4 mPos = modelMatrix * globalPosition;\r\n  \r\n\tgl_Position = projectionMatrix * viewMatrix * mPos;\r\n}\r\n`\r\n\r\nconst fragmentShader = `\r\nvarying float v_pz;\r\n\r\nvoid main() {\r\n\tvec3 color = mix(vec3(0.0), vec3(0.68, 0.89, 0.40), v_pz);\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}\r\n`\r\n","export const getPublicPath = (path: string) => {\r\n\treturn process.env.PUBLIC_URL + path\r\n}\r\n","export const cnoise31 = `\r\n//\tClassic Perlin 3D Noise \r\n//\tby Stefan Gustavson\r\n//\r\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\r\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\r\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\r\n\r\nfloat cnoise31(vec3 P){\r\n  vec3 Pi0 = floor(P); // Integer part for indexing\r\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n  Pi0 = mod(Pi0, 289.0);\r\n  Pi1 = mod(Pi1, 289.0);\r\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n  vec4 iz0 = Pi0.zzzz;\r\n  vec4 iz1 = Pi1.zzzz;\r\n\r\n  vec4 ixy = permute(permute(ix) + iy);\r\n  vec4 ixy0 = permute(ixy + iz0);\r\n  vec4 ixy1 = permute(ixy + iz1);\r\n\r\n  vec4 gx0 = ixy0 / 7.0;\r\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\r\n  gx0 = fract(gx0);\r\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n  vec4 sz0 = step(gz0, vec4(0.0));\r\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n  vec4 gx1 = ixy1 / 7.0;\r\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\r\n  gx1 = fract(gx1);\r\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n  vec4 sz1 = step(gz1, vec4(0.0));\r\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n  g000 *= norm0.x;\r\n  g010 *= norm0.y;\r\n  g100 *= norm0.z;\r\n  g110 *= norm0.w;\r\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n  g001 *= norm1.x;\r\n  g011 *= norm1.y;\r\n  g101 *= norm1.z;\r\n  g111 *= norm1.w;\r\n\r\n  float n000 = dot(g000, Pf0);\r\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n  float n111 = dot(g111, Pf1);\r\n\r\n  vec3 fade_xyz = fade(Pf0);\r\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n  return 2.2 * n_xyz;\r\n}\r\n`\r\n","import React, { Suspense, VFC } from 'react';\nimport { OrbitControls, Stats } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { SwayingGrass } from './SwayingGrass';\n\nexport const TCanvas: VFC = () => {\n\treturn (\n\t\t<Canvas\n\t\t\tcamera={{\n\t\t\t\tposition: [-5, 15, 30],\n\t\t\t\tfov: 50,\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\n\t\t\t\tnear: 0.1,\n\t\t\t\tfar: 2000\n\t\t\t}}\n\t\t\tdpr={window.devicePixelRatio}\n\t\t\tshadows={false}>\n\t\t\t{/* scene */}\n\t\t\t<color attach=\"background\" args={['#ade1ad']} />\n\t\t\t{/* camera controller */}\n\t\t\t<OrbitControls attach=\"orbitControls\" target={[0, 8, 0]} />\n\t\t\t{/* objects */}\n\t\t\t<Suspense fallback={null}>\n\t\t\t\t<SwayingGrass />\n\t\t\t</Suspense>\n\t\t\t{/* helper */}\n\t\t\t<Stats />\n\t\t\t<axesHelper />\n\t\t</Canvas>\n\t)\n}\n","import React, { VFC } from 'react';\nimport { css } from '@emotion/css';\nimport { TCanvas } from './three/TCanvas';\n\nexport const App: VFC = () => {\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<TCanvas />\n\t\t</div>\n\t)\n}\n\nconst styles = {\n\tcontainer: css`\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t\toverflow: hidden;\n\t`\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}